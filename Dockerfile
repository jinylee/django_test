

# ----------------------------------------------------------------------------------------------------------------------
# $> docker build -t django_test:0.0.1 .
# ----------------------------------------------------------------------------------------------------------------------
# ref : https://docs.docker.com/engine/reference/builder/
# ----------------------------------------------------------------------------------------------------------------------
# 기반으로 할 이미지 정의. <이미지>:<태그> 형태
# 태크는 simple Tag와 Shared Tag로 구분되며, shared tag가 일반적으로 official 제품군으로 사용됨
# FROM 은 여러개 사용이 가능함
# ARG를 통해 변수와 같이 사용될 수 있음
# ----------------------------------------------------------------------------------------------------------------------
FROM python:3.8

# ----------------------------------------------------------------------------------------------------------------------
# 이미지를 생성한 사람의 정보 입력
# ----------------------------------------------------------------------------------------------------------------------
MAINTAINER jinylee <jinylee75@gmail.com>

# ----------------------------------------------------------------------------------------------------------------------
# ENV 명령은 환경변수를 설정. RUNm CMD, ENTRYPOINT에 즉각 반영됨
# docker run -e 변수=값 이미지이름 형태로 설정도 가능
# ----------------------------------------------------------------------------------------------------------------------
# apt-get 등의 명령에서 인터렉티브하게 진행하지 않도록 함
ENV DEBIAN_FRONTEND noninteractive


# ----------------------------------------------------------------------------------------------------------------------
# RUN은 FROM에서 설정한 이미지 위에서 명령어를 실행시킨다. 즉, FROM 이미지가 실행되고, 그 환경에서 명령이 실행된다고 보면됨
# 실행결과는 cache 되어서 재사용되며, 재 실행하기 위해서은 "docker build --no-cache" 옵션을 설정해 주어야함
# 포맷은 아래의 형태 모두 가능
# RUN mkdir -p /app or RUN ["mkdir", "-p", "/app"]
# ----------------------------------------------------------------------------------------------------------------------

# apt-get 도구를 설치하여 필요한 라이브러리를 설치한다.
RUN apt-get -qq update && \
    apt-get -q -y upgrade && \
    apt-get install -y --no-install-recommends \
        libgeos-dev apt-utils nodejs

# local 설정을 수행한다.
RUN apt-get install -y locales && \
    echo "LC_ALL=ko_KR.UTF-8" >> /etc/environment && \
    echo "ko_KR.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "LANG=ko_KR.UTF-8" > /etc/locale.conf && \
    locale-gen ko_KR.UTF-8 && \
    update-locale ko_KR.UTF-8

# local 설정에 대한 환경변수 설정
ENV LANG ko_KR.UTF-8
ENV LANGUAGE ko_KR.UTF-8
ENV LC_ALL ko_KR.UTF-8

# ARG 설정
ARG ENV

RUN echo "deploy env : ${ENV}"
# ----------------------------------------------------------------------------------------------------------------------
# WORKDIR 은 RUN, CMD, ENTRYPOINT에서 설정한 실행파일이 실행될 디렉토리 위치 임
# ----------------------------------------------------------------------------------------------------------------------
WORKDIR /app

# ----------------------------------------------------------------------------------------------------------------------
# CMD는 컨테이너가 실행되고 가장 처음 실행될 명령어임
# ENTRYPOINT와도 같이 사용되어, 파라미터만 넣는 형태가 될 수 있다. 1),2),3)모두 가능
# 1) CMD touch /home/hello.txt
# 2) CMD ["touch","/home/hello.txt"]
# 3) ENTRYPOINT ["touch"]
#    CMD{"/home/hello.txt"}
# ----------------------------------------------------------------------------------------------------------------------
# python django 수행
CMD ["python", "manage.py", "runserver", "0.0.0.0:9001"]

# ----------------------------------------------------------------------------------------------------------------------
# EXPOSE는 호스트와 연결할 포트 번호를 설정하는 명령으로, 호슽와 연결하는 포트를 설정할 뿐 외부에 공개되지는 않음
# 1) EXPOSE 80
# 2) EXPOSE 80 443
# 3) EXPOSE 80/tcp 190000/udp
#
# 외부에 공개시 "docker run -p 80:80/tcp -p 80:80/udp" 형태로 외부오픈 포트 80을 내부 80/tcp에 리다이렉션하도록 설정
# ----------------------------------------------------------------------------------------------------------------------
EXPOSE 9001

# useradd 명령 실행
RUN useradd -m app

# ----------------------------------------------------------------------------------------------------------------------
# COPY 복사 명령이며 아래의 포맷을 가짐. --chown 옵션은 리눅스 기반의 컨테이너에서만  작동함.
# src는 호스트,즉 현재 docker 실행하는 머신의 경로, dest는 이미지내부 경로임
# COPY [--chown=<user>:<group>] <src>... <dest>
# COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]
# ----------------------------------------------------------------------------------------------------------------------

# python freeze 도구를 통해 생성된 requirements.txt를 통해 라이브러리를 설치하는 과정
COPY requirements/ /tmp/requirements/
RUN pip install -r /tmp/requirements/${ENV}.txt


# ----------------------------------------------------------------------------------------------------------------------
# ADD 추가 명령. 복사와 다르게 src가 URL 혹은 압축파일일 수도 있으며, 압축인 경우 해제후 추가됨. COPY와 다른점임
# ADD <복사할 파일 경로(호스트)> <파일이 위치할 경로(이미지내부)>
# ADD [--chown=<user>:<group>] <src>... <dest>
# ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]
# ----------------------------------------------------------------------------------------------------------------------
# 현재 디렉토리 전체를 /app 에 추가
ADD . /app


# ----------------------------------------------------------------------------------------------------------------------
# 명령을 실행할 사용자 계정 설정. RUN, CMD, ENTRYPOINT에 즉각 반영됨
# ----------------------------------------------------------------------------------------------------------------------
# 생성한 app 계정 사용
USER app

# ----------------------------------------------------------------------------------------------------------------------
# VOLUME은 지정된 컨테이너의 디렉토리를 호스트에 저장하도록 함
# VOLUME /root/tmp
# VOLUME ["/root/tmp", "/home/newfolder"]
# 아래의 명령으로 대체되기도 함
# docker run -v <호스트디렉토리>:<이미지내부디렉토리> 이미지이름
# ex_ docker run -v /root/tmp:/home/tmp imagename
# ----------------------------------------------------------------------------------------------------------------------
